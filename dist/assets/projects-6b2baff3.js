const e=[{id:"elev8ed",title:"Elev8ed — Self-Improvement App",description:"A gamified self-improvement mobile application designed to help users stay consistent with their goals through vision and action.",detailed_description:"Elev8ed is a personal project where I designed, built, and iterated on a mobile app that merges self-improvement with gamification. I led the full development lifecycle: from research and wireframing, to UI/UX design, to implementing core features in FlutterFlow and integrating APIs. The app introduces a vision system where users create avatars representing their future selves, attach attributes to define goals, and track progress in a structured, motivational way. Throughout the project, I applied both technical and product-thinking skills: database design, frontend development, animation, user feedback loops, and branding.",project_type:"personal",tech_stack:["FlutterFlow","JavaScript","Firebase","Jira"],timeline_steps:[{step_title:"Research & Concept Ideation",step_description:"Studied gamification strategies, analyzed self-improvement trends, and defined the target audience. Created a feature roadmap and sketched early concepts inspired by video games and anime aesthetics.",date:"2023-01-01",status:"completed"},{step_title:"Wireframing & UI/UX Design",step_description:"Created wireframes and prototypes with a focus on a clean, minimalistic design with a gaming-inspired feel. Iterated layouts for the vision page, onboarding flow, and attribute/goal tracking to maximize clarity and engagement.",date:"2023-02-01",status:"completed"},{step_title:"Frontend Development",step_description:"Implemented UI in FlutterFlow and React (for web components). Used Tailwind for styling consistency and responsive layouts. Built custom navigation flows and interactive components to replicate a polished app experience.",date:"2023-03-01",status:"completed"},{step_title:"Backend Setup & Database Design",step_description:"Configured Firebase as the backend to handle authentication, user data, and real-time updates. Designed scalable data models for visions, avatars, attributes, and goals.",date:"2023-03-15",status:"completed"},{step_title:"Feature Development",step_description:"Built the avatar system (with attributes, habits, and goals), progress tracking dashboards, and gamified reward mechanisms. Designed data-driven graphs and integrated time/date calculations for progress visualization.",date:"2023-04-01",status:"completed"},{step_title:"Branding & Visual Identity",step_description:"Created the Elev8ed brand identity, including the logo, color scheme (matte black primary with green/red highlights), and avatar design language. Ensured consistency across UI and marketing material.",date:"2023-04-15",status:"completed"},{step_title:"Internal Testing & Feedback",step_description:"Conducted closed testing with peers and early users. Identified usability challenges in the walkthrough and layout. Designed and launched structured feedback surveys to gather insights for iteration.",date:"2023-05-01",status:"completed"},{step_title:"Iteration & Bug Fixing",step_description:"Refined onboarding flow, simplified confusing sections, fixed UI/UX bugs, and optimized backend queries. Prioritized changes that improved clarity, engagement, and retention.",date:"2023-05-15",status:"completed"},{step_title:"Future Roadmap",step_description:"Planned Strava API integration for activity tracking, improved gamification with 3D avatars, and eventual deployment to App Store/Google Play.",date:"2023-06-01",status:"in_progress"}],start_date:"2024-01-01",demo_url:"https://elev8edapp.github.io/Elev8edApp/",image_url:"/images/projects/Elev8edLogo.png",featured:!0},{id:"knapsack-maze-solver",title:"Knapsack-Maze Solver",description:"An algorithmic project implementing recursive and dynamic programming knapsack solvers combined with maze pathfinding to maximise collected treasure value subject to a weight capacity.",detailed_description:"University assignment project for COSC2123/3119. I implemented and evaluated multiple strategies for the Knapsack-Maze challenge: a recursive (backtracking) knapsack solver, a dynamic-programming (memory-function) knapsack solver that exports the DP table to CSV, and a pathfinding system that uses BFS to compute shortest paths between entrance, treasures and exit and then searches permutations to find shortest collection routes. I also designed and implemented an exploration strategy for the partially-observable (hidden treasures) variant that balances expected treasure value against exploration cost, ran empirical experiments comparing runtimes and produced plots and analysis for the report. The work includes theoretical complexity analysis, empirical experiment design and results, code (submitted to GitHub), CSV exports of DP tables, and visualisations of runtime behaviour and maze solutions.",project_type:"university",tech_stack:["Python","Dynamic Programming (memory functions)","Breadth-First Search (BFS)","CSV export","matplotlib / plotting","Git / GitHub"],timeline_steps:[{step_title:"Algorithm design & implementation",step_description:"Designed and implemented recursive and dynamic-programming knapsack solvers (backtracking, memoisation). Skills: recursion, DP, Python.",date:"2025-03-15",status:"completed"},{step_title:"Pathfinding & integration",step_description:"Modeled mazes as graphs and implemented BFS-based pathfinding; integrated shortest-path results with knapsack selection. Skills: graph algorithms, system integration.",date:"2025-04-01",status:"completed"},{step_title:"Experimental design & analysis",step_description:"Benchmarked algorithms, measured runtimes, and performed complexity analysis; produced plots to compare approaches. Skills: empirical evaluation, data visualisation.",date:"2025-04-20",status:"completed"},{step_title:"Probabilistic exploration strategy",step_description:"Developed a heuristic for partially-observable mazes balancing expected value vs exploration cost. Skills: probabilistic reasoning, heuristic design.",date:"2025-05-05",status:"completed"},{step_title:"Engineering & tooling",step_description:"Wrote modular, testable code with CSV export and version-controlled the project. Skills: software engineering, testing, Git/GitHub.",date:"2025-05-15",status:"completed"},{step_title:"Reporting & communication",step_description:"Documented methods, results and insights in a concise report and visual assets suitable for portfolio presentation. Skills: technical writing, data storytelling.",date:"2025-05-22",status:"completed"}],start_date:"2025-03-01",end_date:"2025-05-22",image_url:"/images/projects/KnapsackSolver.png",featured:!0},{id:"maze-generator",title:"Minecraft Maze Generator",description:"Group project implementing a recursive-backtracking maze generator and associated tooling, integrated into a Minecraft C++ codebase.",detailed_description:"Team project to build a Minecraft ‘MazeRunner’ expansion using the mcpp Minecraft C++ API. I implemented the recursive backtracking maze-generation algorithm in C++ (C++17), integrated it with the shared codebase, and ensured the generator worked with build/cleanup routines and the solver. I contributed maintainable, tested code, collaborated on interface contracts with teammates, and helped produce test cases and the demonstration video.",project_type:"university",tech_stack:["C++17","Recursive Backtracking (maze generation)","mcpp (Minecraft C++ API)","Breadth-First Search (solver integration)","I/O blackbox testing","Makefile","Git / GitHub"],timeline_steps:[{step_title:"Algorithm implementation",step_description:"Implemented recursive backtracking maze generator (perfect mazes) in C++.",date:"2024-09-10",status:"completed"},{step_title:"Code integration & API use",step_description:"Integrated generator into the team’s mcpp codebase and build/cleanup routines. (Skills: API integration)",date:"2024-09-25",status:"completed"},{step_title:"Testing & deterministic mode",step_description:"Added deterministic test mode and blackbox tests to validate outputs and ensure reproducibility.",date:"2024-10-10",status:"completed"},{step_title:"Team coordination",step_description:"Defined interfaces, kept code modular and documented changes for easy merges and reviews.",date:"2024-10-22",status:"completed"},{step_title:"Solver compatibility & visualization",step_description:"Ensured generated mazes worked with the solver and implemented in-game build visualisation.",date:"2024-10-30",status:"completed"},{step_title:"Demo & docs",step_description:"Contributed to the demo video and wrote the README and usage notes for the project.",date:"2024-11-05",status:"completed"}],start_date:"2024-08-15",end_date:"2024-11-08",image_url:"/images/projects/MazeGenerator.jpg",featured:!0},{id:"peak-app",title:"Peak — iOS Focus & Screen-Time App",description:"An iOS app that motivates users to stay focused on tasks by turning distraction-free time into a gamified mountain-climb challenge.",detailed_description:"Peak is a Swift-based productivity app designed to help users avoid phone distractions and maintain focus. The core idea is to reframe time spent away from distracting apps as progress up a mountain, rewarding consistency with visual milestones and progress tracking. Built with SwiftUI and following Apple’s Human Interface Guidelines, the app integrates Family Controls to manage app usage during focus sessions, alongside contextual elements like weather-based themes. Peak is being developed iteratively, with future milestones including deeper gamification, richer analytics, and full App Store readiness.",project_type:"university",tech_stack:["Swift","SwiftUI","Xcode","Family Controls API","Weather API","Git / GitHub"],timeline_steps:[{step_title:"Concept & product design",step_description:"Defined the vision of using a mountain-climb metaphor to motivate focus and mapped initial user journeys.",date:"2025-08-10",status:"completed"},{step_title:"Wireframing & design system",step_description:"Created wireframes and established a clean, intuitive UI aligned with Apple HIG.",date:"2025-08-18",status:"completed"},{step_title:"Core development",step_description:"Built SwiftUI views, timer logic, and animations to support focus sessions and progress feedback.",date:"2025-08-24",status:"in_progress"},{step_title:"Distraction management",step_description:"Integrated Family Controls API to restrict access to distracting apps during focus sessions.",date:"2025-08-31",status:"in_progress"},{step_title:"User motivation features",step_description:"Designed gamified rewards and progress tracking to encourage consistency and long-term engagement.",date:"2025-09-10",status:"planned"},{step_title:"Future roadmap",step_description:"Expand analytics, refine gamification, and prepare for beta testing and App Store submission.",date:"2025-09-20",status:"planned"}],start_date:"2025-08-01",end_date:null,image_url:"/images/projects/PeakLogo.png",featured:!0},{id:"placement-matcher",title:"Student Placement Algorithm",description:"A Python-based tool that matches students to placement opportunities by balancing preferences and travel distance.",detailed_description:"This ongoing personal project focuses on building an algorithm and software tool to automate the allocation of students to placement sites. The system ingests Excel files with student details (preferences and location) and business openings, then applies an algorithm that balances proximity with preference ranking. Location data is incorporated via a mapping API to estimate travel distance. The goal is to provide universities with a user-friendly tool that increases the success rate of student–placement matches, reduces manual work, and allows flexible prioritisation (closer to home vs. higher-ranked preference). The design draws on algorithmic knowledge from coursework, with a focus on optimisation, fairness, and usability.",project_type:"personal",tech_stack:["Python","Pandas","Excel I/O","Geocoding/Distance API","Algorithm design & optimisation"],timeline_steps:[{step_title:"Problem discovery",step_description:"Discussed requirements with a university staff member and gathered details on current placement allocation processes.",date:"2025-07-15",status:"completed"},{step_title:"Data analysis",step_description:"Reviewed Excel input formats (student preferences and business placement data) to define schema and edge cases.",date:"2025-07-20",status:"completed"},{step_title:"Algorithm design",step_description:"Designed a matching algorithm that considers both location proximity and ranked preferences.",date:"2025-08-01",status:"in_progress"},{step_title:"Prototype implementation",step_description:"Building Python prototype using Pandas for data handling and external API calls for distance calculation.",date:"2025-09-01",status:"in_progress"},{step_title:"User interface",step_description:"Planned a simple, user-friendly interface for staff to upload Excel files and view allocation results.",date:"2025-09-15",status:"planned"},{step_title:"Testing & iteration",step_description:"Will validate matching accuracy with real-world sample data and refine heuristics for fairness and efficiency.",date:"2025-10-01",status:"planned"}],start_date:"2025-07-15",end_date:null,image_url:"/images/projects/StudentMatching.png",featured:!0}],t={projects:e};export{t as default,e as projects};
